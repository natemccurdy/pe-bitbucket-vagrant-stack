---
roles:

  puppet-master:
    forwarded_ports:
      - {guest: 443, host: 4443, auto_correct: true}
    provisioners:
      - type: shell
        inline: "echo 'nameserver 8.8.8.8' > /etc/resolv.conf"
      - type: pe_bootstrap
        role: :master
        answer_extras:
          - '"puppet_enterprise::profile::master::r10k_remote": "ssh://git@bitbucket:7999/pup/control-repo.git"'
          - '"puppet_enterprise::profile::master::r10k_private_key": "/etc/puppetlabs/puppetserver/ssh/id-control_repo.rsa"'
          - '"puppet_enterprise::profile::master::code_manager_auto_configure": true'

  get_modules:
    provisioners:
      - type: shell
        inline: "mkdir -p /etc/puppetlabs/code-staging/environments/production"
      - type: shell
        inline: "r10k puppetfile install --puppetfile /vagrant/Puppetfile --moduledir /etc/puppetlabs/code-staging/environments/production/modules -v"

  setup_control_repo:
    provisioners:
      - type: shell
        inline: |
          yes | cp /vagrant/environment.conf /etc/puppetlabs/code-staging/environments/production/environment.conf
          yes | cp -r /vagrant/manifests /etc/puppetlabs/code-staging/environments/production/
          yes | cp -r /vagrant/site /etc/puppetlabs/code-staging/environments/production/
          yes | cp -r /vagrant/hieradata /etc/puppetlabs/code-staging/environments/production/
          yes | cp -r /vagrant/scripts /etc/puppetlabs/code-staging/environments/production/
          /bin/chown -R pe-puppet:pe-puppet /etc/puppetlabs/code-staging
          /vagrant/scripts/trigger-file-sync.sh && sleep 5
          puppet agent -t || true
          puppet agent -t || true

  puppet_agent:
    provisioners:
      - type: shell
        inline: "echo 'nameserver 8.8.8.8' > /etc/resolv.conf"
      - type: pe_agent
        master_vm: 'puppet-master'
      - type: shell
        inline: 'puppet agent -t || echo "Waiting for the puppet run to finish, then restarting bitbucket to enable dev mode..."; while [[ -f /opt/puppetlabs/puppet/cache/state/agent_catalog_run.lock ]]; do sleep 5; echo -n "." ; done'
      - type: shell
        inline: 'service atlbitbucket restart'

  el-tools:
    provisioners:
      - type: shell
        inline: '/usr/bin/yum install telnet vim tree git -y'

  el-fix-path:
    provisioners:
      - type: shell
        inline: |
          echo "export PATH=$PATH:/usr/local/bin" > /etc/profile.d/path_fix.sh

  el-stop-firewall:
    provisioners:
      - type: shell
        inline: |
          systemctl stop firewalld.service 2>&1
          systemctl disable firewalld.service 2>&1
          exit 0

  2_cpus:
    providers:
      - type: virtualbox
        customize:
          - [modifyvm, !ruby/sym id, '--cpus', 2]
      - type: vmware_fusion
        vmx:
          cpus: 2

  2gb-memory:
    providers:
      - type: virtualbox
        customize:
          - [modifyvm, !ruby/sym id, '--memory', 2048]
      - type: vmware_fusion
        vmx:
          memsize: 2048

  4gb-memory:
    providers:
      - type: virtualbox
        customize:
          - [modifyvm, !ruby/sym id, '--memory', 4096]
      - type: vmware_fusion
        vmx:
          memsize: 4096

  pe-memory-tuning:
    provisioners:
      # Upload to /tmp and then use a shell script to copy into place. This
      # method works with remote machines.
      - type: file
        source: 'hieradata/common.yaml'
        destination: '/tmp/common.yaml'
      - type: shell
        inline: |-
          mkdir -p /etc/puppetlabs/code/environments/production/hieradata
          if [ -e /tmp/common.yaml ]; then
            install -m 0644 /tmp/common.yaml /etc/puppetlabs/code/environments/production/hieradata
          fi
  base:
    provisioners:
      # A generic hosts provisioner is defined here so that networking is one
      # of the first things configured. Other roles can hook into the
      # 'base networking' provisioner and override settings.
      - {type: hosts, name: 'base networking'}
    providers:
      - type: virtualbox
        linked_clone: true
        overrides:
          vm_defaults:
            private_networks:
              - {auto_network: true}
            provisioners:
              - type: hosts
                name: 'base networking'
                preserve_order: true
                sync_hosts: true
                add_localhost_hostnames: false
                hosts:
                  - ['@vagrant_private_networks', ['@vagrant_hostnames']]
                imports: ['global', 'virtualbox', 'vmware']
                exports:
                  virtualbox:
                    - ['@vagrant_private_networks', ['@vagrant_hostnames']]
      - type: vmware_fusion
        overrides:
          vm_defaults:
            private_networks:
              - {auto_network: true}
            provisioners:
              - type: hosts
                name: 'base networking'
                preserve_order: true
                sync_hosts: true
                add_localhost_hostnames: false
                hosts:
                  - ['@vagrant_private_networks', ['@vagrant_hostnames']]
                imports: ['global', 'virtualbox', 'vmware']
                exports:
                  vmware:
                    - ['@vagrant_private_networks', ['@vagrant_hostnames']]
      - type: vmware_workstation
        overrides:
          vm_defaults:
            private_networks:
              - {auto_network: true}
            provisioners:
              - type: hosts
                name: 'base networking'
                preserve_order: true
                sync_hosts: true
                add_localhost_hostnames: false
                hosts:
                  - ['@vagrant_private_networks', ['@vagrant_hostnames']]
                imports: ['global', 'virtualbox', 'vmware']
                exports:
                  vmware:
                    - ['@vagrant_private_networks', ['@vagrant_hostnames']]
